/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.cien.udptest;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Set;

/**
 *
 * @author Cien
 */
public final class ClientGUI extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private final transient Client client;
    private final transient Set<User> users = new HashSet<>();
    private final transient Set<User> usersTyping = new HashSet<>();
    private long nextUserListRepaint = System.currentTimeMillis();
    
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI(Client client) {
        initComponents();
        this.client = client;
    }
    
    private void pushText(String text) {
        this.chatMessages.setText(this.chatMessages.getText()+text+"\n");
    }
    
    public Client getClient() {
        return client;
    }
    
    private void updateUserList() {
        User selectedUser = this.userList.getSelectedValue();
        User[] usersArray = this.users.toArray(User[]::new);
        int index = -1;
        for (int i = 0; i < usersArray.length; i++) {
            if (usersArray[i].equals(selectedUser)) {
                index = i;
            }
        }
        
        this.userList.setListData(usersArray);
        this.userList.setSelectedIndex(index);
    }
    
    private void updateUsersTypingLabel() {
        User[] typing = this.usersTyping.toArray(User[]::new);
        if (typing.length == 0) {
            this.typingLabel.setText("");
            return;
        }
        if (typing.length == 1) {
            this.typingLabel.setText(typing[0].getName()+" is typing...");
            return;
        }
        StringBuilder b = new StringBuilder();
        for (int i = 0; i < typing.length; i++) {
            User u = typing[i];
            if (i == (typing.length - 1)) {
                b.append(" and ");
            } else if (i != 0) {
                b.append(", ");
            }
            b.append(u.getName());
        }
        b.append(" are typing...");
        this.typingLabel.setText(b.toString());
    }
    
    public void onUserStartTyping(User user) {
        this.usersTyping.add(user);
        updateUsersTypingLabel();
    }
    
    public void onUserStopTyping(User user) {
        this.usersTyping.remove(user);
        updateUsersTypingLabel();
    }
    
    public void onUserConnected(User user) {
        this.users.add(user);
        updateUserList();
    }
    
    public void onUserPingUpdate(User user) {
        if (System.currentTimeMillis() >= this.nextUserListRepaint) {
            this.nextUserListRepaint = System.currentTimeMillis() + 3000;
            this.userList.repaint();
        }
    }
    
    public void onUserDisconnected(User user) {
        this.users.remove(user);
        updateUserList();
    }
    
    public void onMessageReceived(UserMessage message) {
        pushText(message.getUser().getName()+": "+message.getMessage());
    }
    
    public void onTimeout(int warning) {
        pushText("Lost connection to the server, retrying... ("+warning+"/"+Main.MAX_TIMEOUT_WARNINGS+")");
    }
    
    public void onConnectionRestored() {
        pushText("Connection Restored!");
    }
    
    public void onError(Throwable t) {
        this.userList.setEnabled(false);
        this.messageField.setEnabled(false);
        this.sendButton.setEnabled(false);
        
        ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
        PrintStream stream = new PrintStream(byteArray, true, StandardCharsets.UTF_8);
        t.printStackTrace(stream);
        stream.flush();
        pushText("Error:");
        pushText(byteArray.toString(StandardCharsets.UTF_8));
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatMessages = new javax.swing.JTextArea();
        chatMessages.setEditable(false);
        messageField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        typingLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Client GUI");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        chatMessages.setColumns(20);
        chatMessages.setLineWrap(true);
        chatMessages.setRows(5);
        chatMessages.setTabSize(4);
        chatMessages.setToolTipText("Chat messages");
        jScrollPane1.setViewportView(chatMessages);

        messageField.setToolTipText("The message text.");
        messageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageFieldKeyTyped(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.setToolTipText("Sends the message.");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(userList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (this.client.sendMessage(this.messageField.getText())) {
            this.messageField.setText("");
        } else {
            pushText("Message too long!");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void messageFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyTyped
        if (evt.getKeyChar() == '\n') {
            sendButtonActionPerformed(null);
            return;
        }
        this.client.typing();
    }//GEN-LAST:event_messageFieldKeyTyped

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.client.exit();
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatMessages;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField messageField;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel typingLabel;
    private javax.swing.JList<User> userList;
    // End of variables declaration//GEN-END:variables
}
